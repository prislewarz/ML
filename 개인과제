import torch
import torchvision.datasets as dsets
import torchvision.transforms as transforms
import torch.nn.init
import matplotlib.pyplot as plt

device = 'cuda' if torch.cuda.is_available() else 'cpu'

torch.manual_seed(777)
if device == 'cuda':
    torch.cuda.manual_seed_all(777)
    
learning_rate = 0.001
training_epochs = 10
batch_size = 100

dropout = torch.nn.Dropout(0.5)
batch = torch.nn.BatchNorm1d(100)

kmnist_train = dsets.KMNIST(root='KMNIST_data/',
                          train=True,
                          transform=transforms.ToTensor(),
                          download=True)

kmnist_test = dsets.KMNIST(root='KMNIST_data/',
                         train=False,
                         transform=transforms.ToTensor(),
                         download=True)
                         
dataset_loader = torch.utils.data.DataLoader(dataset=kmnist_train,
                                            batch_size=batch_size,
                                            shuffle=True,
                                            drop_last=True)
                                            
from torch.utils.data import Dataset

class KMNIST_data(Dataset): 
  def __init__(self,data, target = 'target',normalize=True):
    self.x = data.drop(target,1)

    if normalize:
      scaler = StandardScaler()
      self.x = pd.DataFrame(scaler.fit_transform(self.x))

    self.y = data['target']

    self.x=torch.tensor(self.x.values).float()
    self.y=torch.tensor(self.y).float()

  def __len__(self): 
    return len(self.x)

  def __getitem__(self,idx): 
    x=self.x[idx]
    y=self.y[idx]

    return x,y
    
class CNN(torch.nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        
        self.layer1 = torch.nn.Sequential(
            torch.nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1),
            torch.nn.ReLU(),
            torch.nn.MaxPool2d(kernel_size=2, stride=2))
       
        self.layer2 = torch.nn.Sequential(
            torch.nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            torch.nn.ReLU(),
            torch.nn.MaxPool2d(kernel_size=2, stride=2))
        
        self.fc = torch.nn.Linear(7 * 7 * 64, 10, bias=True)
        torch.nn.init.xavier_uniform_(self.fc.weight)

    def forward(self, x):
        out = self.layer1(x)
        out = self.layer2(out)
        out = out.view(out.size(0), -1)   
        out = self.fc(out)
        return out
        
model = CNN().to(device)
criterion = torch.nn.CrossEntropyLoss().to(device)
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

total_batch = len(dataset_loader)

for epoch in range(training_epochs):
    avg_cost = 0

    for X, Y in dataset_loader:
        
        X = X.to(device)
        Y = Y.to(device)

        optimizer.zero_grad()
        hypothesis = model(X)
        cost = criterion(hypothesis, Y)
        cost.backward()
        optimizer.step()

        avg_cost += cost / total_batch

    print('[Epoch: {:>4}] cost = {:>.9}'.format(epoch + 1, avg_cost))
    
with torch.no_grad():
    X_test = kmnist_test.test_data.view(len(kmnist_test), 1, 28, 28).float().to(device)
    Y_test = kmnist_test.test_labels.to(device)

    prediction = model(X_test)
    correct_prediction = torch.argmax(prediction, 1) == Y_test
    accuracy = correct_prediction.float().mean()
    print('Accuracy:', accuracy.item())
