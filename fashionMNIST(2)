# Import packages
import numpy as np
import tensorflow as tf

from tf.data import Dataset
from tf.keras.datasets import fashion_mnist
from tf.keras import Input, Model
from tf.keras.layers import Dense
from tf.keras.losses import CategoricalCrossentropy
from tf.keras.metrics import CategoricalAccuracy
from tf.keras.optimizers import SGD
from tf.keras.optimizers.schedules import CosineDecay

# Config
batch_size = 100
epochs = 30
lr = 1e-2
momentum = 0.9

# Download fashion_mnist dataset
(train_image, train_label), (test_image, test_label) = fashion_mnist.load_data()

# Split train / validation sets
valid_image = train_image[55000:, :, :]
valid_label = train_label[55000:]
train_image = train_image[:55000, :, :]
train_label = train_label[:55000]

# Build dataset 1: Dataset loader
train_dataset = Dataset.from_tensor_slices((train_image, train_label))
valid_dataset = Dataset.from_tensor_slices((valid_image, valid_label))
test_dataset = Dataset.from_tensor_slices((test_image, test_label))

print("train_dataset", len(train_dataset))
print("valid_dataset", len(valid_dataset))
print("test_dataset", len(test_dataset))

# Build dataset 2: Preprocessing, Grouping
def preprocess(image, label):
    """ Preprocess image and label
        1) convert image type: 'uint8' -> 'float32'
        2) normalize image: 0 ~ 255 -> 0 ~ 1
        3) reshape image: (28, 28) -> 784
        4) convert label to one-hot vector
    """
    image = tf.cast(image, tf.float32)
    image = image / 255.0
    image = tf.reshape(image, (784,))
    label = tf.one_hot(label, depth=10, dtype=tf.float32)
    return image, label

train_dataset = train_dataset.map(preprocess, num_parallel_calls=tf.data.AUTOTUNE)
train_dataset = train_dataset.shuffle(len(train_dataset))
train_dataset = train_dataset.batch(batch_size)

valid_dataset = valid_dataset.map(preprocess, num_parallel_calls=tf.data.AUTOTUNE)
valid_dataset = valid_dataset.batch(batch_size)

test_dataset = test_dataset.map(preprocess, num_parallel_calls=tf.data.AUTOTUNE)
test_dataset = test_dataset.batch(batch_size)

# Build model
inputs = Input(shape=(784,), name='input')
x = Dense(10, activation="softmax", name='output')(inputs)
model = Model(inputs, x, name='linear')
model.summary()

# Build loss 
loss = CategoricalCrossentropy()
# Build performance metric 
metric = CategoricalAccuracy()
# Build optimizer
lr_schedule = CosineDecay(lr, len(train_dataset) * epochs)
optimizer = SGD(lr_schedule, momentum=momentum)
# Compile model
model.compile(optimizer=optimizer, loss=loss, metrics=metric)
# Train model
history = model.fit(train_dataset, epochs=epochs, validation_data=valid_dataset)

# Visualize learning curve (it is not an essential step)
import pandas as pd
import matplotlib.pyplot as plt

losses = pd.DataFrame({
    'train_loss': history.history['loss'], 
    'valid_loss': history.history['val_loss'],
})
accuracies = pd.DataFrame({
    'train_acc': history.history['categorical_accuracy'], 
    'valid_acc': history.history['val_categorical_accuracy'],
})

losses.plot(figsize=(8,6))
plt.grid(True)
plt.gca().set_xlim(0, 15)
plt.show()

accuracies.plot(figsize=(8,6))
plt.grid(True)
plt.gca().set_xlim(0, 15)
plt.show()

# Test model
model.evaluate(test_dataset)
# Predict
new_input = test_image[0, :, :]
new_input = tf.cast(new_input, tf.float32) / 255.0
new_input = tf.reshape(new_input, (1, 784))
prediction = model.predict(new_input)

# Visualize
for i in range(28):
    x = ''
    for j in range(28):
        x += f'{test_image[0, i, j]:3} '
    print(x)

x = ''
for i in range(10):
    x += f'{prediction[0, i]:.2f} '
print(x)

# Save model
model.save('mlp.h5')
# Load model
model2 = tf.keras.models.load_model('mlp.h5')
model2.summary()
