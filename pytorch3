x=torch.randn(2,3)
x.dtype
y=torch.arange(1,4, dtype=torch.int64)
x*y #텐서곱

a=x.T
a@x #행렬곱
z=torch.cat([a@x,x],dim=0)
print(y.unsqueeze(1))

import torch

x = torch.ones(5)  # input tensor
y = torch.zeros(3)  # expected output
w = torch.randn(5, 3)
b = torch.randn(3)
z = torch.matmul(x, w)+b
loss = torch.nn.functional.binary_cross_entropy_with_logits(z, y)

print(f"Gradient function for z = {z.grad_fn}")
print(f"Gradient function for loss = {loss.grad_fn}")
print(w.grad)
print(b.grad)

z = torch.matmul(x, w)+b
print(z.requires_grad)

with torch.no_grad():
    z = torch.matmul(x, w)+b
print(z.requires_grad)

inputs, targets = data.iloc[:, 0:-1], data.iloc[:, -1]
inputs = pd.get_dummies(inputs, dummy_na=True)
print(inputs)


